buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forgegradle_version}", changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: "${mixingradle_version}"
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'net.minecrell.licenser' version '0.4.1'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'

group = 'com.teammoeg'
version = "${minecraft_version}-${mod_version}"
archivesBaseName = 'frostedheart'
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
java.toolchain.languageVersion = JavaLanguageVersion.of(8)
sourceSets {
    main {
        resources {
            srcDirs = [
                    "$rootDir/src/main/resources",
            ]
        }
    }
	datagen {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.output
        runtimeClasspath += main.output
        resources {
            srcDirs = [
                    "$rootDir/src/datagen/resources",
            ]
        }
    }
}
minecraft {
    mappings channel: 'snapshot', version: '20210309-1.16.5'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            //jvmArgs '-Xdebug','-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009'

            // For Mac OS X users with an Apple Silicon chip,
            // you would need the latest GLFW version that supports Apple Silicon.
            // You can download the latest GLFW version from https://www.glfw.org/download.html
            // and set the LIBGLFW_PATH_MACOS environment variable to the path of the
            // GLFW library file libglfw.3.dylib
            // NOTE for IDEA user: You need to manually set the JVM arg
            // and the environment variable in the IDEA run configuration.
            if (System.env.LIBGLFW_PATH_MACOS != null) {
                println "LIBGLFW_PATH_MACOS is set to ${System.env.LIBGLFW_PATH_MACOS}"
                jvmArgs "-Dorg.lwjgl.glfw.libname=${System.env.LIBGLFW_PATH_MACOS}"
            }

            // Similar steps for Linux users
            if (System.env.LIBGLFW_PATH != null) {
                jvmArgs "-Dorg.lwjgl.glfw.libname=${System.env.LIBGLFW_PATH}/lib/libglfw.so"
            }

            arg "-mixin.config=" + "frostedheart.mixins.json"
            mods {
                frostedheart {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=" + "frostedheart.mixins.json"
            mods {
                frostedheart {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'frostedheart','--all','--output', file('src/generated/resources/'), 'validate', '--existing', file('src/main/resources/'), '--existing-mod', 'immersiveengineering', '--existing-mod','rankine'
            mods {
                frostedheart {
					source sourceSets.main
                    source sourceSets.datagen
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

mixin {
    add sourceSets.main, "frostedheart.refmap.json"
}

repositories {
    mavenLocal()
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    // IE & CT Files
    maven {
        name = "BlameJared"
        url = "https://maven.blamejared.com/"
        content {
			excludeGroup "curse.maven"
		}
    }
    // JEI and TC Files
    maven {
        name = "DVS1 Maven FS"
        url = "https://dvs1.progwml6.com/files/maven"
        content {
			excludeGroup "curse.maven"
		}
    }
    // Needed for JEI
    maven {
        name = "latvian maven"
        url = "https://maven.latmod.com/"
        content {
            includeGroup "mezz.jei"
            excludeGroup "curse.maven"
        }
    }
	// Location of the maven for Flywheel
    maven {
        name = "tterrag maven"
        url = "https://maven.tterrag.com/"
        content {
			excludeGroup "curse.maven"
		}
    }
    // Needed for Curios API
    maven {
        name = "theillusivec4 maven"
        url = "https://maven.theillusivec4.top/"
        content {
			excludeGroup "curse.maven"
		}
    }
    maven {
        url "https://maven.architectury.dev/"
        content {
        	includeGroup "me.shedaniel"
        	excludeGroup "curse.maven"
        }
    }
    maven {
        url "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.ftb.mods"
            includeGroup "dev.latvian.mods"
            excludeGroup "curse.maven"
        }
    }
//    maven {
//        name = "teammoeg maven"
//        url = "http://server.teammoeg.com:8888/releases"
//        content {
//            includeGroup "gloridifice.watersource"
//            includeGroup "com.alcatrazescapee.primalwinter"
//            includeGroup "java.moze_intel"
//        }
//    }
    maven {
        name = "TeamMoeg COS Maven"
        url = "https://maven-1301510336.cos.ap-guangzhou.myqcloud.com"
        content {
            includeGroup "gloridifice.watersource"
            includeGroup "com.alcatrazescapee.primalwinter"
            includeGroup "java.moze_intel"
            excludeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
//    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation fg.deobf("mezz.jei:jei-1.16.5:7.6.4.88")
    implementation fg.deobf("me.shedaniel:architectury-forge:${rootProject.architectury_version}")
    implementation fg.deobf("dev.ftb.mods:ftb-library-forge:${rootProject.ftb_library_version}")
    implementation fg.deobf("dev.ftb.mods:ftb-teams-forge:${rootProject.ftb_teams_version}")
    implementation fg.deobf("dev.ftb.mods:ftb-chunks-forge:1605.3.2-build.115")
    implementation fg.deobf("dev.latvian.mods:item-filters-forge:1605.2.5-build.9")
    implementation fg.deobf("curse.maven:diet-443570:3756693")
    implementation fg.deobf('com.alcatrazescapee.primalwinter:primal-winter:1.16.4-2.0.5-TWR')
    implementation fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:1.16.5-5.0.7-143")
    implementation fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:1.16.5-5.0.7-143:datagen")
    implementation fg.deobf("gloridifice.watersource:WaterSource:1.1.33-beta-1.16.5")
    implementation fg.deobf("curse.maven:create-328085:3499718")
    implementation fg.deobf("curse.maven:flywheel-486392:3459739")
    implementation fg.deobf('curse.maven:Project-Rankine-400704:4086553')
    implementation fg.deobf("curse.maven:thermopolium-594107:4005647")

    compileOnly fg.deobf("curse.maven:chisel-235279:3376782")
    compileOnly fg.deobf("curse.maven:ctm-267602:3137659")
    implementation fg.deobf("curse.maven:kiwi-303657:3377053")
    compileOnly fg.deobf("curse.maven:snowrealmagic-308663:3295579")
    implementation fg.deobf("curse.maven:tetra-289712:3585032")
    implementation fg.deobf("curse.maven:mgui-351914:3456505")
    compileOnly fg.deobf("curse.maven:selene-499980:3517008")
    compileOnly fg.deobf("curse.maven:age-api-353992:3176394")
    compileOnly fg.deobf("curse.maven:neolithic-world-534605:3937806")
    compileOnly fg.deobf("curse.maven:supplementaries-412082:3650035")
    compileOnly fg.deobf("curse.maven:engineers-decor-313866:3566177")
    compileOnly fg.deobf("curse.maven:projecte-226410:3223221")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.5.2:api")
    compileOnly fg.deobf("dev.ftb.mods:ftb-quests-forge:1605.3.6-build.98")

    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.5.2")

    // FG5 requires 0.8.3
    annotationProcessor "org.spongepowered:mixin:0.8.2:processor"
    testAnnotationProcessor "org.spongepowered:mixin:0.8.2:processor"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Frosted Heart",
                "Specification-Vendor"    : "TeamMoeg",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "TeamMoeg",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "frostedheart.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set('deobf')
}

artifacts {
    archives sourcesJar
    archives deobfJar
}
jar {
   with copySpec {
      from 'src/main/resources/frostedheart.mixins.json' 
      filter{l -> l.replaceAll('"create.MixinSmartTileEntity",','')}; 
   }
} 
String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "Frosted Heart for The Winter Rescue Modpack ${version}"
                temp = "<span style=\"font-size: 18px; color: #333399;\">Frosted Heart for The Winter Rescue Modpack v${mod_version}</span>&nbsp;&nbsp;<em>for Minecraft ${minecraft_version}</em><br/>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp<br/>"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>");
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>");
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += temp
            lineCount++
        } else {
            str += "<p>Please submit any Issues you come across on the&nbsp;<a href=\"https://github.com/${github_project}/issues\" rel=\"nofollow\">Issue Tracker</a>.</p>"
            done = true
        }
    }
    return str
}

/*
 * Copyright (c) 2024 TeamMoeg
 *
 * This file is part of Frosted Heart.
 *
 * Frosted Heart is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * Frosted Heart is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Frosted Heart. If not, see <https://www.gnu.org/licenses/>.
 *
 */

// changelog debugging
//new File("changelog.html").write getChangelogText()

curseforge {
    project {
        def envApiKey = System.getenv('CURSEFORGE_API_KEY')
        apiKey = envApiKey == null ? 'nope' : envApiKey

        id = project.projectId
        changelog = getChangelogText()
        changelogType = 'html'
        releaseType = project.curse_type
        addGameVersion project.minecraft_version

        mainArtifact (jar) {
            relations {
                requiredDependency 'create'
                requiredDependency 'flywheel'
                requiredDependency 'immersive-engineering'
                requiredDependency 'thermopolium'
//                requiredDependency 'snow-real-magic'
//                requiredDependency 'kiwi'
//                requiredDependency 'primal-winter'
            }
        }
    }
}

// Automatically apply a license header when running checkLicense / updateLicense
license {
    header = project.file('HEADER.txt')
    ignoreFailures = true
    include '**/*.java'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact deobfJar
            artifact sourcesJar
        }
    }
    repositories {
//        maven {
//            name = "TeamMoeg"
//            url = "http://server.teammoeg.com:8888/releases"
//            credentials {
//                username = System.getenv('TEAMMOEG_USER')
//                password = System.getenv('TEAMMOEG_TOKEN')
//            }
//            authentication {
//                basic(BasicAuthentication)
//            }
//        }
        maven {
            name = "COS"
            url = "http://127.0.0.1:9999"
        }
    }
}
